{"version":3,"sources":["../../src/observe.ts","../../src/InView.tsx","../../src/useInView.tsx","components/Projects/Projects.module.css","components/Projects/ProjectItem.module.css","Assets/Screenshot 2022-06-15 220520.png","Assets/commbot.png","Assets/chatroom screen.png","Assets/RAimage.png","components/Projects/ProjectItem.js","Assets/1024px-Tidal_Code_Screenshot.png","components/Projects/Projects.js"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","observe","element","callback","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","createObserver","id","instance","thresholds","elements","observer","entries","forEach","entry","inView","some","trackVisibility","isVisible","Array","isArray","callbacks","push","splice","indexOf","length","unobserve","size","disconnect","isPlainChildren","props","children","React","useInView","_temp","delay","rootMargin","triggerOnce","skip","initialInView","onChange","state","setState","current","setRef","node","result","ref","module","exports","ProjectItem","animationRef","sectionisVisible","image","RAimage","CRimage","IMimage","CBimage","className","classes","item","staggered_fade_in","href","github","info","name","subtitle","description","src","alt","PROJECTS","placeholder","Projects","projectList","list","container","header"],"mappings":"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","file":"static/js/4.163d767e.chunk.js","sourcesContent":["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  // Store the onChange callback in a `ref`, so we can access the latest instance inside the `useCallback`.\n  callback.current = onChange;\n\n  const setRef = React.useCallback(\n    (node: Element | null) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n            if (callback.current) callback.current(inView, entry);\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n          fallbackInView,\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  React.useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Projects_container__31SMh\",\"header\":\"Projects_header__3jFSm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ProjectItem_item__1dBQD\",\"staggered_fade_in\":\"ProjectItem_staggered_fade_in__-mMy0\",\"fade-in\":\"ProjectItem_fade-in__362bF\",\"info\":\"ProjectItem_info__2hGJh\",\"image\":\"ProjectItem_image__1hBV-\",\"up-bump\":\"ProjectItem_up-bump__1I615\",\"down-bump\":\"ProjectItem_down-bump__3Qnh2\"};","export default __webpack_public_path__ + \"static/media/Screenshot 2022-06-15 220520.aec180bf.png\";","export default __webpack_public_path__ + \"static/media/commbot.c58a3d26.png\";","export default __webpack_public_path__ + \"static/media/chatroom screen.0e9be6a3.png\";","export default __webpack_public_path__ + \"static/media/RAimage.e0b5f735.png\";","import classes from \"./ProjectItem.module.css\";\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nimport IMimage from \"../../Assets/Screenshot 2022-06-15 220520.png\";\r\nimport CBimage from \"../../Assets/commbot.png\";\r\nimport CRimage from \"../../Assets/chatroom screen.png\";\r\nimport RAimage from \"../../Assets/RAimage.png\";\r\n\r\nconst ProjectItem = (props) => {\r\n  const { ref: animationRef, inView: sectionisVisible } = useInView({\r\n    threshold: 0.5,\r\n    triggerOnce: true,\r\n  });\r\n\r\n  const image =\r\n    props.id === 1\r\n      ? RAimage\r\n      : props.id === 2\r\n      ? CRimage\r\n      : props.id === 3\r\n      ? IMimage\r\n      : CBimage;\r\n\r\n  return (\r\n    <li\r\n      ref={animationRef}\r\n      className={`${classes.item} ${\r\n        sectionisVisible ? classes.staggered_fade_in : \"\"\r\n      }`}\r\n    >\r\n      <a href={props.github}>\r\n        <div className={classes.info}>\r\n          <h1>{props.name}</h1>\r\n          <h3>{props.subtitle}</h3>\r\n          <p>{props.description}</p>\r\n          <h3>LEARN MORE</h3>\r\n        </div>\r\n        <div className={classes.image}>\r\n          <img src={image} alt=\"project\" />\r\n        </div>\r\n      </a>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ProjectItem;\r\n","export default __webpack_public_path__ + \"static/media/1024px-Tidal_Code_Screenshot.de778fd9.png\";","import classes from \"./Projects.module.css\";\r\nimport ProjectItem from \"./ProjectItem\";\r\n\r\nimport IMimage from \"../../Assets/Screenshot 2022-06-15 220520.png\";\r\nimport CBimage from \"../../Assets/commbot.png\";\r\nimport placeholder from \"../../Assets/1024px-Tidal_Code_Screenshot.png\";\r\n\r\nconst PROJECTS = [\r\n  {\r\n    id: 1,\r\n    name: \"Root Approximator\",\r\n    subtitle: \"Calculation life-saver\",\r\n    description:\r\n      \"Windows console application allowing users to speed up long, complex Numerical Analysis calculations\",\r\n    github: \"https://github.com/Buhnanuers/Root-Approximator\",\r\n    image: { placeholder },\r\n  },\r\n\r\n  {\r\n    id: 2,\r\n    name: \"Chat Room\",\r\n    subtitle: \"Web-Based Social App\",\r\n    description:\r\n      \"Web application utilizing express.js to provide chat room functionality to users\",\r\n    github: \"https://github.com/Buhnanuers/Chat-room\",\r\n    image: { placeholder },\r\n  },\r\n\r\n  {\r\n    id: 3,\r\n    name: \"Inventory Manager\",\r\n    subtitle: \"Simple Mangement App\",\r\n    description:\r\n      \"Web application built with React to provide a smooth, simple inventory management experience\",\r\n    github: \"https://github.com/Buhnanuers/Inventory-Manager\",\r\n    image: { IMimage },\r\n  },\r\n\r\n  {\r\n    id: 4,\r\n    name: \"CommBot\",\r\n    subtitle: \"Discord Bot\",\r\n    description:\r\n      \"Discord bot to assist artists with keeping track of impromptu or spontaneous commissions\",\r\n    github: \"https://github.com/Buhnanuers/CommBot\",\r\n    image: { CBimage },\r\n  },\r\n];\r\n\r\nconst Projects = () => {\r\n  const projectList = (\r\n    <ul className={classes.list}>\r\n      {PROJECTS.map((item) => (\r\n        <ProjectItem\r\n          key={item.id}\r\n          id={item.id}\r\n          name={item.name}\r\n          subtitle={item.subtitle}\r\n          description={item.description}\r\n          github={item.github}\r\n          image={item.image}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n\r\n  return (\r\n    <div id=\"projects\" className={classes.container}>\r\n      <div className={classes.header}>Projects</div>\r\n      {projectList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Projects;\r\n"],"sourceRoot":""}